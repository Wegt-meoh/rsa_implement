#扩展欧几里得求逆元
def exgcd(a,b):
    if a<0 or b<0:
        raise Exception('exgcd:input error')
    if a<b:
        a,b=b,a 
    q=[]   
    while b!=0:
        q.append([a,b])
        a,b=b,a%b
                
    q.reverse()
    x,y=1,0
    for i in q:
        x,y=y,x-i[0]//i[1]*y       
    return [x,y]
            
    #递归版
    # if b==0:
    #     return [1,0]
    # else:

    #     t=exgcd(b,a%b)
    #     return  [t[1],t[0]-a//b*t[1]]

def quick_algorithm(a,b,c):  
    a=a%c  
    ans=1  
    #这里我们不需要考虑b<0，因为分数没有取模运算  
    while b!=0:  
        if b&1:  
            ans=(ans*a)%c  
        b>>=1  
        a=(a*a)%c  
    return ans

def rsaEncrypt(word,e,n):
    res=[]
    for i in word:
        res.append(pow(ord(i),e,n))
    return res

def rsaDecrypt(word,d,n):
    res=''
    for i in word:
        p=pow(i,d,n)
        res+=chr(p)
    return res

# from pyunit_prime import get_large_prime_bit_size

# p=get_large_prime_bit_size(2048)
# q=get_large_prime_bit_size(2048)
large_p=19546652277258830922916743785770710996261860940924858475854599238500419033697255067564881604812127538430269894898133796417700779457896463365874516237354803960055235947963082530332928516617873920830762334391939016284070362127158181818212077470770747810725665933582943181691133827830378061740829530021365134664355627028839651686479796369524033725005597450579885079681812598478691732209568125389203884732263384438513563570895231790325255254535829570802500742274824755557560915939058900166607088632026736600612932074282116795144724624856255194981596525597595964001576561177397594257665854026328799612331817155943186552083
large_q=28496347832498633590713446858030150548067362230838229542996124603381666983671263240042100890753591576462456474149024544057324673157094255254605077303392646741106233587566670379044116016285202837761150348938220650794235625853182944987449775829268043602720081223968652259769261643416207958874942484372806249773806399432083048509692586071564211877063219628820736811343837538593779317156087473603749912714821224719768196500844374085776518860920866551608408274575744672182368230623954446694277231210964163312657317118886647597835608524845597444836835531837309633130117900374809697649466453311618477416971538642564246948429
# t=int(0x25B18BF5F389097D17237866BB51CFF8DE922453749EBC403B0995C97C0E386D46C161CADFF77C69860DAE4791C214CF8487AAAA9F26E920A977834906038AEFB5C30827DFCF3FC9E9769544F94E07CDFE0872039A3A6262116678B261FB2D6B9D32539E92A153B3675629BAB3942E7D35E30F7EEF5ABF1C50D797D0CC88E1BDCCFD1A12EA6F7EF75C3727DBDF2E780F3428AE8F7A4FB7A89F184A365032B153F8425E845750EB2B7ABC02DC15CE0207507AA950863BB8480A78028DD62979944D6C633FAFA103E4DB28CE87F5A0C6ED4A2F2664427F565C7781AB6191456D971C7FFA395272374CEC0155E5F91189DB742E4C28B03A0FA11CFFB03173D2A4CCE6AE53)
p=large_p
q=large_q
e = 65537
n=p*q
fn=(p-1)*(q-1)
d=exgcd(e,fn)[1]
while d<0:
    d+=fn
word='hello world'
cip=rsaEncrypt(word,e,n)
decip=rsaDecrypt(cip,d,n)
print(word,cip,decip)
